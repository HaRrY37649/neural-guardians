
import React from 'react';
import { cn } from '@/lib/utils';
import GlassCard from '../shared/GlassCard';
import { AlertTriangle, AlertCircle, AlertOctagon, ChevronDown, ChevronUp } from 'lucide-react';
import { Button } from '@/components/ui/button';

export interface Vulnerability {
  id: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  lineNumber?: number;
  codeSnippet?: string;
  recommendation?: string;
}

interface VulnerabilityCardProps {
  vulnerability: Vulnerability;
  className?: string;
}

const VulnerabilityCard: React.FC<VulnerabilityCardProps> = ({ vulnerability, className }) => {
  const [isExpanded, setIsExpanded] = React.useState(false);

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
        return <AlertOctagon className="w-5 h-5" />;
      case 'high':
        return <AlertCircle className="w-5 h-5" />;
      case 'medium':
      case 'low':
        return <AlertTriangle className="w-5 h-5" />;
      default:
        return <AlertTriangle className="w-5 h-5" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-400';
      case 'high':
        return 'text-orange-600 bg-orange-50 dark:bg-orange-900/20 dark:text-orange-400';
      case 'medium':
        return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20 dark:text-yellow-400';
      case 'low':
        return 'text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400';
      default:
        return 'text-gray-600 bg-gray-50 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  return (
    <GlassCard 
      className={cn('overflow-hidden transition-all', className)}
      variant="default"
    >
      <div className="p-5">
        <div className="flex justify-between">
          <div className="flex items-start gap-3">
            <div className={cn('rounded-full p-2', getSeverityColor(vulnerability.severity))}>
              {getSeverityIcon(vulnerability.severity)}
            </div>
            <div>
              <h3 className="font-medium text-base">{vulnerability.title}</h3>
              <p className="text-sm text-muted-foreground mt-1">{vulnerability.description}</p>
            </div>
          </div>
          <Button 
            variant="ghost" 
            size="sm" 
            className="h-8 w-8 p-0"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
          </Button>
        </div>

        {isExpanded && (
          <div className="mt-4 pt-4 border-t border-border animate-fade-in">
            {vulnerability.lineNumber && (
              <div className="mb-3">
                <span className="text-sm font-medium">Line Number:</span>
                <span className="text-sm ml-2 text-muted-foreground">{vulnerability.lineNumber}</span>
              </div>
            )}

            {vulnerability.codeSnippet && (
              <div className="mb-4">
                <p className="text-sm font-medium mb-2">Affected Code:</p>
                <pre className="bg-muted/50 rounded-lg p-3 text-xs overflow-x-auto">
                  <code>{vulnerability.codeSnippet}</code>
                </pre>
              </div>
            )}

            {vulnerability.recommendation && (
              <div>
                <p className="text-sm font-medium mb-2">Recommendation:</p>
                <p className="text-sm text-muted-foreground">{vulnerability.recommendation}</p>
              </div>
            )}
          </div>
        )}
      </div>
    </GlassCard>
  );
};

export default VulnerabilityCard;
